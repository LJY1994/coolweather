package com.admom.mygreendaotest;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.bme.hitsz.kevin.coolweather.db.Town;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TOWN".
*/
public class TownDao extends AbstractDao<Town, Long> {

    public static final String TABLENAME = "TOWN";

    /**
     * Properties of entity Town.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TownName = new Property(1, String.class, "townName", false, "TOWN_NAME");
        public final static Property WeatherId = new Property(2, String.class, "weatherId", false, "WEATHER_ID");
        public final static Property CityId = new Property(3, String.class, "cityId", false, "CITY_ID");
        public final static Property TownCode = new Property(4, int.class, "townCode", false, "TOWN_CODE");
    }


    public TownDao(DaoConfig config) {
        super(config);
    }
    
    public TownDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TOWN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOWN_NAME\" TEXT," + // 1: townName
                "\"WEATHER_ID\" TEXT," + // 2: weatherId
                "\"CITY_ID\" TEXT," + // 3: cityId
                "\"TOWN_CODE\" INTEGER NOT NULL );"); // 4: townCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TOWN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Town entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String townName = entity.getTownName();
        if (townName != null) {
            stmt.bindString(2, townName);
        }
 
        String weatherId = entity.getWeatherId();
        if (weatherId != null) {
            stmt.bindString(3, weatherId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(4, cityId);
        }
        stmt.bindLong(5, entity.getTownCode());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Town entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String townName = entity.getTownName();
        if (townName != null) {
            stmt.bindString(2, townName);
        }
 
        String weatherId = entity.getWeatherId();
        if (weatherId != null) {
            stmt.bindString(3, weatherId);
        }
 
        String cityId = entity.getCityId();
        if (cityId != null) {
            stmt.bindString(4, cityId);
        }
        stmt.bindLong(5, entity.getTownCode());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Town readEntity(Cursor cursor, int offset) {
        Town entity = new Town( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // townName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // weatherId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // cityId
            cursor.getInt(offset + 4) // townCode
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Town entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTownName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWeatherId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCityId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTownCode(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Town entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Town entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Town entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
